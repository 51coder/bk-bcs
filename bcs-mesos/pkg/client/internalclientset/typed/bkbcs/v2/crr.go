// Code generated by client-gen. DO NOT EDIT.

package v2

import (
	v2 "bk-bcs/bcs-mesos/pkg/apis/bkbcs/v2"
	scheme "bk-bcs/bcs-mesos/pkg/client/internalclientset/scheme"

	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	rest "k8s.io/client-go/rest"
)

// CrrsGetter has a method to return a CrrInterface.
// A group's client should implement this interface.
type CrrsGetter interface {
	Crrs(namespace string) CrrInterface
}

// CrrInterface has methods to work with Crr resources.
type CrrInterface interface {
	Create(*v2.Crr) (*v2.Crr, error)
	Update(*v2.Crr) (*v2.Crr, error)
	UpdateStatus(*v2.Crr) (*v2.Crr, error)
	Delete(name string, options *v1.DeleteOptions) error
	DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error
	Get(name string, options v1.GetOptions) (*v2.Crr, error)
	List(opts v1.ListOptions) (*v2.CrrList, error)
	Watch(opts v1.ListOptions) (watch.Interface, error)
	Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v2.Crr, err error)
	CrrExpansion
}

// crrs implements CrrInterface
type crrs struct {
	client rest.Interface
	ns     string
}

// newCrrs returns a Crrs
func newCrrs(c *BkbcsV2Client, namespace string) *crrs {
	return &crrs{
		client: c.RESTClient(),
		ns:     namespace,
	}
}

// Get takes name of the crr, and returns the corresponding crr object, and an error if there is any.
func (c *crrs) Get(name string, options v1.GetOptions) (result *v2.Crr, err error) {
	result = &v2.Crr{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("crrs").
		Name(name).
		VersionedParams(&options, scheme.ParameterCodec).
		Do().
		Into(result)
	return
}

// List takes label and field selectors, and returns the list of Crrs that match those selectors.
func (c *crrs) List(opts v1.ListOptions) (result *v2.CrrList, err error) {
	result = &v2.CrrList{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("crrs").
		VersionedParams(&opts, scheme.ParameterCodec).
		Do().
		Into(result)
	return
}

// Watch returns a watch.Interface that watches the requested crrs.
func (c *crrs) Watch(opts v1.ListOptions) (watch.Interface, error) {
	opts.Watch = true
	return c.client.Get().
		Namespace(c.ns).
		Resource("crrs").
		VersionedParams(&opts, scheme.ParameterCodec).
		Watch()
}

// Create takes the representation of a crr and creates it.  Returns the server's representation of the crr, and an error, if there is any.
func (c *crrs) Create(crr *v2.Crr) (result *v2.Crr, err error) {
	result = &v2.Crr{}
	err = c.client.Post().
		Namespace(c.ns).
		Resource("crrs").
		Body(crr).
		Do().
		Into(result)
	return
}

// Update takes the representation of a crr and updates it. Returns the server's representation of the crr, and an error, if there is any.
func (c *crrs) Update(crr *v2.Crr) (result *v2.Crr, err error) {
	result = &v2.Crr{}
	err = c.client.Put().
		Namespace(c.ns).
		Resource("crrs").
		Name(crr.Name).
		Body(crr).
		Do().
		Into(result)
	return
}

// UpdateStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().

func (c *crrs) UpdateStatus(crr *v2.Crr) (result *v2.Crr, err error) {
	result = &v2.Crr{}
	err = c.client.Put().
		Namespace(c.ns).
		Resource("crrs").
		Name(crr.Name).
		SubResource("status").
		Body(crr).
		Do().
		Into(result)
	return
}

// Delete takes name of the crr and deletes it. Returns an error if one occurs.
func (c *crrs) Delete(name string, options *v1.DeleteOptions) error {
	return c.client.Delete().
		Namespace(c.ns).
		Resource("crrs").
		Name(name).
		Body(options).
		Do().
		Error()
}

// DeleteCollection deletes a collection of objects.
func (c *crrs) DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error {
	return c.client.Delete().
		Namespace(c.ns).
		Resource("crrs").
		VersionedParams(&listOptions, scheme.ParameterCodec).
		Body(options).
		Do().
		Error()
}

// Patch applies the patch and returns the patched crr.
func (c *crrs) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v2.Crr, err error) {
	result = &v2.Crr{}
	err = c.client.Patch(pt).
		Namespace(c.ns).
		Resource("crrs").
		SubResource(subresources...).
		Name(name).
		Body(data).
		Do().
		Into(result)
	return
}
