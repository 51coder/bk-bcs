// Code generated by informer-gen. DO NOT EDIT.

package v2

import (
	bkbcs_v2 "bk-bcs/bcs-mesos/pkg/apis/bkbcs/v2"
	internalinterfaces "bk-bcs/bcs-mesos/pkg/client/informers/internalinterfaces"
	internalclientset "bk-bcs/bcs-mesos/pkg/client/internalclientset"
	v2 "bk-bcs/bcs-mesos/pkg/client/lister/bkbcs/v2"
	time "time"

	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
	watch "k8s.io/apimachinery/pkg/watch"
	cache "k8s.io/client-go/tools/cache"
)

// BcsEndpointInformer provides access to a shared informer and lister for
// BcsEndpoints.
type BcsEndpointInformer interface {
	Informer() cache.SharedIndexInformer
	Lister() v2.BcsEndpointLister
}

type bcsEndpointInformer struct {
	factory          internalinterfaces.SharedInformerFactory
	tweakListOptions internalinterfaces.TweakListOptionsFunc
	namespace        string
}

// NewBcsEndpointInformer constructs a new informer for BcsEndpoint type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewBcsEndpointInformer(client internalclientset.Interface, namespace string, resyncPeriod time.Duration, indexers cache.Indexers) cache.SharedIndexInformer {
	return NewFilteredBcsEndpointInformer(client, namespace, resyncPeriod, indexers, nil)
}

// NewFilteredBcsEndpointInformer constructs a new informer for BcsEndpoint type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewFilteredBcsEndpointInformer(client internalclientset.Interface, namespace string, resyncPeriod time.Duration, indexers cache.Indexers, tweakListOptions internalinterfaces.TweakListOptionsFunc) cache.SharedIndexInformer {
	return cache.NewSharedIndexInformer(
		&cache.ListWatch{
			ListFunc: func(options v1.ListOptions) (runtime.Object, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.BkbcsV2().BcsEndpoints(namespace).List(options)
			},
			WatchFunc: func(options v1.ListOptions) (watch.Interface, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.BkbcsV2().BcsEndpoints(namespace).Watch(options)
			},
		},
		&bkbcs_v2.BcsEndpoint{},
		resyncPeriod,
		indexers,
	)
}

func (f *bcsEndpointInformer) defaultInformer(client internalclientset.Interface, resyncPeriod time.Duration) cache.SharedIndexInformer {
	return NewFilteredBcsEndpointInformer(client, f.namespace, resyncPeriod, cache.Indexers{cache.NamespaceIndex: cache.MetaNamespaceIndexFunc}, f.tweakListOptions)
}

func (f *bcsEndpointInformer) Informer() cache.SharedIndexInformer {
	return f.factory.InformerFor(&bkbcs_v2.BcsEndpoint{}, f.defaultInformer)
}

func (f *bcsEndpointInformer) Lister() v2.BcsEndpointLister {
	return v2.NewBcsEndpointLister(f.Informer().GetIndexer())
}
