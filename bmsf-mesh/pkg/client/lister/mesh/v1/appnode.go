/*
Copyright (C) 2019 The BlueKing Authors. All rights reserved.

Permission is hereby granted, free of charge, to any person obtaining a copy of
this software and associated documentation files (the "Software"), to deal in
the Software without restriction, including without limitation the rights to
use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
of the Software, and to permit persons to whom the Software is furnished to do
so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "bk-bcs/bmsf-mesh/pkg/apis/mesh/v1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// AppNodeLister helps list AppNodes.
type AppNodeLister interface {
	// List lists all AppNodes in the indexer.
	List(selector labels.Selector) (ret []*v1.AppNode, err error)
	// AppNodes returns an object that can list and get AppNodes.
	AppNodes(namespace string) AppNodeNamespaceLister
	AppNodeListerExpansion
}

// appNodeLister implements the AppNodeLister interface.
type appNodeLister struct {
	indexer cache.Indexer
}

// NewAppNodeLister returns a new AppNodeLister.
func NewAppNodeLister(indexer cache.Indexer) AppNodeLister {
	return &appNodeLister{indexer: indexer}
}

// List lists all AppNodes in the indexer.
func (s *appNodeLister) List(selector labels.Selector) (ret []*v1.AppNode, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.AppNode))
	})
	return ret, err
}

// AppNodes returns an object that can list and get AppNodes.
func (s *appNodeLister) AppNodes(namespace string) AppNodeNamespaceLister {
	return appNodeNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// AppNodeNamespaceLister helps list and get AppNodes.
type AppNodeNamespaceLister interface {
	// List lists all AppNodes in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1.AppNode, err error)
	// Get retrieves the AppNode from the indexer for a given namespace and name.
	Get(name string) (*v1.AppNode, error)
	AppNodeNamespaceListerExpansion
}

// appNodeNamespaceLister implements the AppNodeNamespaceLister
// interface.
type appNodeNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all AppNodes in the indexer for a given namespace.
func (s appNodeNamespaceLister) List(selector labels.Selector) (ret []*v1.AppNode, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.AppNode))
	})
	return ret, err
}

// Get retrieves the AppNode from the indexer for a given namespace and name.
func (s appNodeNamespaceLister) Get(name string) (*v1.AppNode, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("appnode"), name)
	}
	return obj.(*v1.AppNode), nil
}
