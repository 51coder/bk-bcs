/*
Copyright (C) 2019 The BlueKing Authors. All rights reserved.

Permission is hereby granted, free of charge, to any person obtaining a copy of
this software and associated documentation files (the "Software"), to deal in
the Software without restriction, including without limitation the rights to
use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
of the Software, and to permit persons to whom the Software is furnished to do
so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/

// Code generated by client-gen. DO NOT EDIT.

package v1

import (
	v1 "bk-bcs/bmsf-mesh/pkg/apis/mesh/v1"
	scheme "bk-bcs/bmsf-mesh/pkg/client/internalclientset/scheme"

	meta_v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	rest "k8s.io/client-go/rest"
)

// AppNodesGetter has a method to return a AppNodeInterface.
// A group's client should implement this interface.
type AppNodesGetter interface {
	AppNodes(namespace string) AppNodeInterface
}

// AppNodeInterface has methods to work with AppNode resources.
type AppNodeInterface interface {
	Create(*v1.AppNode) (*v1.AppNode, error)
	Update(*v1.AppNode) (*v1.AppNode, error)
	UpdateStatus(*v1.AppNode) (*v1.AppNode, error)
	Delete(name string, options *meta_v1.DeleteOptions) error
	DeleteCollection(options *meta_v1.DeleteOptions, listOptions meta_v1.ListOptions) error
	Get(name string, options meta_v1.GetOptions) (*v1.AppNode, error)
	List(opts meta_v1.ListOptions) (*v1.AppNodeList, error)
	Watch(opts meta_v1.ListOptions) (watch.Interface, error)
	Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1.AppNode, err error)
	AppNodeExpansion
}

// appNodes implements AppNodeInterface
type appNodes struct {
	client rest.Interface
	ns     string
}

// newAppNodes returns a AppNodes
func newAppNodes(c *MeshV1Client, namespace string) *appNodes {
	return &appNodes{
		client: c.RESTClient(),
		ns:     namespace,
	}
}

// Get takes name of the appNode, and returns the corresponding appNode object, and an error if there is any.
func (c *appNodes) Get(name string, options meta_v1.GetOptions) (result *v1.AppNode, err error) {
	result = &v1.AppNode{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("appnodes").
		Name(name).
		VersionedParams(&options, scheme.ParameterCodec).
		Do().
		Into(result)
	return
}

// List takes label and field selectors, and returns the list of AppNodes that match those selectors.
func (c *appNodes) List(opts meta_v1.ListOptions) (result *v1.AppNodeList, err error) {
	result = &v1.AppNodeList{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("appnodes").
		VersionedParams(&opts, scheme.ParameterCodec).
		Do().
		Into(result)
	return
}

// Watch returns a watch.Interface that watches the requested appNodes.
func (c *appNodes) Watch(opts meta_v1.ListOptions) (watch.Interface, error) {
	opts.Watch = true
	return c.client.Get().
		Namespace(c.ns).
		Resource("appnodes").
		VersionedParams(&opts, scheme.ParameterCodec).
		Watch()
}

// Create takes the representation of a appNode and creates it.  Returns the server's representation of the appNode, and an error, if there is any.
func (c *appNodes) Create(appNode *v1.AppNode) (result *v1.AppNode, err error) {
	result = &v1.AppNode{}
	err = c.client.Post().
		Namespace(c.ns).
		Resource("appnodes").
		Body(appNode).
		Do().
		Into(result)
	return
}

// Update takes the representation of a appNode and updates it. Returns the server's representation of the appNode, and an error, if there is any.
func (c *appNodes) Update(appNode *v1.AppNode) (result *v1.AppNode, err error) {
	result = &v1.AppNode{}
	err = c.client.Put().
		Namespace(c.ns).
		Resource("appnodes").
		Name(appNode.Name).
		Body(appNode).
		Do().
		Into(result)
	return
}

// UpdateStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().

func (c *appNodes) UpdateStatus(appNode *v1.AppNode) (result *v1.AppNode, err error) {
	result = &v1.AppNode{}
	err = c.client.Put().
		Namespace(c.ns).
		Resource("appnodes").
		Name(appNode.Name).
		SubResource("status").
		Body(appNode).
		Do().
		Into(result)
	return
}

// Delete takes name of the appNode and deletes it. Returns an error if one occurs.
func (c *appNodes) Delete(name string, options *meta_v1.DeleteOptions) error {
	return c.client.Delete().
		Namespace(c.ns).
		Resource("appnodes").
		Name(name).
		Body(options).
		Do().
		Error()
}

// DeleteCollection deletes a collection of objects.
func (c *appNodes) DeleteCollection(options *meta_v1.DeleteOptions, listOptions meta_v1.ListOptions) error {
	return c.client.Delete().
		Namespace(c.ns).
		Resource("appnodes").
		VersionedParams(&listOptions, scheme.ParameterCodec).
		Body(options).
		Do().
		Error()
}

// Patch applies the patch and returns the patched appNode.
func (c *appNodes) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1.AppNode, err error) {
	result = &v1.AppNode{}
	err = c.client.Patch(pt).
		Namespace(c.ns).
		Resource("appnodes").
		SubResource(subresources...).
		Name(name).
		Body(data).
		Do().
		Into(result)
	return
}
